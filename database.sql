  --- Support for multiple Github servers
  create table GHSERVERS
  (
  ghserverid int unique not null,
  serveruri varchar(255) not null
  );

  --- Repository data
  create table repos
  (
  rid int unique not null generated by default as identity (start with 1000, increment by 1),
  rname varchar(255) not null,
  ghserverid int not null,
  ownerid int not null,  --- this is the org or user
  schedule int not null
  ) organize by row;

  --- Github traffic for views and clones
  create table repotraffic
  (
  rid int,
  tdate date,
  viewcount int,
  vuniques int,
  clonecount int,
  cuniques int
  );

  --- The user which accesses Github, hence the token and ghuser name
  create table users
  (
  uid int unique not null generated by default as identity (start with 1000, increment by 1),
  fname varchar(100),
  lname varchar(100),
  email varchar(255) not null,
  ghuser varchar(255),
  ghtoken varchar(255)
  );


  --- Github user or org, needed for full repository name
  create table ghusers
  (
  uid int unique not null generated by default as identity (start with 1000, increment by 1),
  username varchar(255) not null,
  usertype char(1),
  email varchar(255),
  blog varchar(255)
  ) organize by row;

  --- connection between "users" and repos
  create table userrepos
  (
  uid int not null,
  rid int not null
  );

  --- info about last collection runs
  create table systemlog
  (
  uid int not null,
  completed timestamp,
  numrepos int,
  state varchar(100)
  );

  --- system administration
  create table adminusers
  (
  aid int unique not null generated by default as identity (start with 1000, increment by 1),
  auser varchar(255) not null,
  email varchar(255) not null
  );

  --- who has which roles, if admin or maintainer then only entry here
  create table adminroles
  (
  aid int not null,
  role int not null
  );

  --- if role regarding system user ("user") or specific repository, then entry here, too
  create table adminuserreporoles
  (
  aid int not null,
  uid int not null,
  role int not null,
  rid int
  );

  --- What roles are available?
  create table adminrolevalues
  (
  role int unique not null,
  desc varchar(255) not null
  );

  --- initialize those FYI values
  insert into adminrolevalues values (1,'admin'),(2,'sysmaint'),(4,'tenant'),(8,'tenantstats'),(16,'repostats');

  --- view to list available repos per role and adminuser (identified by email)
  create view v_adminuserrepos as
  (
  select ur.rid, au.aid,au.email, aurr.role from  adminuserreporoles aurr, adminusers au, adminroles ar, userrepos ur
  where ar.aid=au.aid
  and aurr.aid=au.aid
  and ur.uid=aurr.uid
  and (bitand(aurr.role,8)>0 or bitand(aurr.role,4)>0)
  union all
  select ur.rid, au.aid,au.email, aurr.role from  adminuserreporoles aurr, adminusers au, adminroles ar, userrepos ur
  where ar.aid=au.aid
  and aurr.aid=au.aid
  and ur.uid=aurr.uid
  and ur.rid=aurr.rid
  and (bitand(aurr.role,16)>0)
  );

  --- view to show statistics for all repos and include full organisation name
  create view v_repostats as (
  select r.rid, username as orgname, rname as reponame, tdate, viewcount, vuniques, clonecount, cuniques from repotraffic rt, ghusers gu, repos r where r.ownerid=gu.uid and rt.rid=r.rid
  );

  --- view to include the organisation name into the available repos
  create view v_adminrepolist as
  (
  select r.rid, gu.username as orgname, r.rname as reponame, v.email from ghusers gu, repos r, v_adminuserrepos v where r.ownerid=gu.uid and v.rid=r.rid
  );
